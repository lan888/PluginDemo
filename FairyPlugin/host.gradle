import org.xml.sax.Attributes
import org.xml.sax.SAXException
import org.xml.sax.helpers.DefaultHandler

import javax.xml.parsers.ParserConfigurationException
import javax.xml.parsers.SAXParser
import javax.xml.parsers.SAXParserFactory
import java.util.jar.JarEntry
import java.util.jar.JarOutputStream
import java.util.regex.Pattern
import java.util.zip.ZipEntry
import java.util.zip.ZipFile
import java.util.zip.ZipInputStream
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
//在宿主脚本中apply此脚本, 此脚本一共做了6件事
//1、编译完成后导出所有资源id，即aaptOptions.additionalParameters这个配置干的事情, 下面第4步需要此文件
//2、编译宿主资源时插入public.xml，用来控制宿主资源id分组
//3、指定插件进程名称，导出.ap_文件
//4、编译完成后根据资源中间文件以及导出的资源id表生成一份主题patch包，编译非独立插件时需要此包
//5、编译完成后导出宿主的jar，包括宿主的src和其依赖的所有class, 编译非独立插件时需要此包
//6、编译完成后导出宿主混淆后的jar，包括宿主的src和其依赖的所有class, 编译非独立插件时若插件需要混淆则需要此包
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
configurations {
    innerPlugin
}

def AndroidGradlePluginVersion = getPlugins().findPlugin("com.android.application").androidBuilder.createdBy

def innerPluginApkList = []

class FaiyExt {
    private String pluginProcess = ":plugin"

    public String getPluginProcess() {
        return pluginProcess
    }

    public void setPluginProcess(String process) {
        this.pluginProcess = process
    }
}
extensions.create('fairy', FaiyExt)

//第1件事
android.aaptOptions.additionalParameters("-P", project.buildDir.absolutePath + "/outputs/generated_exported_all_resouces.xml")

afterEvaluate {

    if (android.defaultConfig.applicationId == null) {
        throw new Exception("宿主build.gradle未配置android.defaultConfig.applicationId")
    }

    configurations.innerPlugin.files.each { file ->
        //收集插件文件地址
        innerPluginApkList << file.absolutePath
    }

    for (variant in android.applicationVariants) {

        def varName = variant.name;
        def buildTypeName = variant.buildType.name
        def flavorName = variant.flavorName
        def varDirName =  variant.dirName

        println 'Check Env : ' + varName +  " " + buildTypeName + " " + flavorName + " " + varDirName

        def scope = variant.getVariantData().getScope()
        def mergeTask = tasks.getByName(scope.getMergeResourcesTask().name)

        //第2件事
        mergeTask.doLast {
            String destPath = mergeTask.outputDir.absolutePath + '/values/'
            //如果是通过本地路径引入的此脚本
            if (buildscript.sourceFile != null) {

                def publicXmlPath = buildscript.sourceFile.getParentFile().absolutePath + '/public.xml'
                println '编译宿主资源时插入' + publicXmlPath + ' 到 ' + destPath + ', 用来控制宿主资源id分组'

                if(!file(publicXmlPath).exists()) {
                    throw new FileNotFoundException("public.xml 文件未找到，请检查路径：" + (buildscript.sourceFile.getParentFile().absolutePath + '/public.xml'))
                }

                copy {
                    from(buildscript.sourceFile.getParentFile()) {
                        include 'public.xml'
                    }
                    into(destPath)
                }
            } else {
                String url = buildscript.sourceURI.toString().replaceFirst("[a-zA-Z\\.]*\$", "public.xml")
                println '编译宿主资源时插入' + url + ' 到' + destPath + ', 用来控制宿主资源id分组'
                HttpURLConnection httpConn =(HttpURLConnection)(new URL(url).openConnection())
                InputStream inputStream = httpConn.getInputStream()
                OutputStream ouput =new FileOutputStream(new File(destPath, "public.xml"))
                byte[] buffer = new byte[8*1024]
                int size = -1
                while((size = inputStream.read(buffer)) != -1) {
                    ouput.write(buffer, 0, size)
                }
                ouput.close()
                httpConn.disconnect()
            }

            if (!file(destPath + "public.xml").exists()) {
                throw new FileNotFoundException("文件不存在：" + destPath + "public.xml")
            }
        }

        def mergeAssetsTask = tasks.getByName(scope.getMergeAssetsTask().name)
        mergeAssetsTask.setOnlyIf { true }
        mergeAssetsTask.outputs.upToDateWhen { false }
        mergeAssetsTask.doLast {

            innerPluginApkList.each { innerAPK ->
                if (!file(innerAPK).exists()) {
                    project.logger.info "引用的插件apk文件不存在，可能插件apk还未编译完成，或者宿主innerPlugin配置的路径错误：", innerAPK
                }
            }

            copy {
                println '复制宿主依赖的内置插件到merge后的assets目录\n' + innerPluginApkList + "\n" + mergeAssetsTask.outputDir
                from files(innerPluginApkList)
                into(mergeAssetsTask.outputDir)
            }
        }

        //第3件事
        for (baseVariant in variant.outputs) {

            def manifestFilePath = baseVariant.processResources.manifestFile.absolutePath;

            baseVariant.processManifest.doLast {

                //android gradle3.+的属性
                //println "$manifestOutputDirectory"

                File manifestFile = new File(manifestFilePath)

                println '正在检查Manifest中的插件配置是否正确' + manifestFile.absolutePath

                def originManifestContent = manifestFile.getText('UTF-8')
                if (originManifestContent.contains("{applicationId}")) {
                    throw new Exception("宿主build.gradle未配置android.defaultConfig.applicationId")
                }

                //生成prop文件
                def pattern = Pattern.compile("versionName\\s*=\\s*\"(.+?)\"");
                def matcher = pattern.matcher(originManifestContent);
                if (matcher.find()) {
                    def versionName = matcher.group(1)
                    //File hostInfo = new File("${project.buildDir}/outputs/HostInfo-" + tastName.replace("process","").replace("Resources", "") + ".prop")
                    //没有单独命名，有多个favor时文件会覆盖
                    File hostInfo = new File("${project.buildDir}/outputs/HostInfo.prop")
                    if (hostInfo.exists()) {
                        hostInfo.delete()
                    }
                    println '正在生成文件' + hostInfo.absolutePath
                    hostInfo.write("#Host Manifest CREATED AT " + new Date().format("yyyy-MM-dd HH:mm::ss"))
                    hostInfo.append("\nhost.versionCode=" + android.defaultConfig.versionCode)
                    //versionName可能有后缀，所以以Manifest中为准
                    hostInfo.append("\nhost.versionName=" + versionName)
                    hostInfo.append("\nhost.buildType=" + buildTypeName)
                    hostInfo.append("\nhost.flavorName=" + flavorName)

                    def packageName = android.defaultConfig.applicationId
                    if (android.buildTypes[buildTypeName].applicationIdSuffix != null) {
                        packageName = packageName + android.buildTypes[buildTypeName].applicationIdSuffix;
                    }

                    hostInfo.append("\nhost.applicationId=" + packageName)
                }

                //指定插件进程名，设置为空串或者null即是和宿主同进程
                //不设置即使用默认进程(:plugin)
                def pluginProcessName = fairy.pluginProcess
                if (!":plugin".equals(pluginProcessName)) {
                    def customPluginProcessName = "";
                    if (pluginProcessName != null) {
                        customPluginProcessName = "android:process=\"" + pluginProcessName + "\""
                    }
                    println '正在设置插件进程配置：' + customPluginProcessName
                    def modifyedManifestContent = originManifestContent.replaceAll("android:process=\":plugin\"", customPluginProcessName)
                    manifestFile.write(modifyedManifestContent, 'UTF-8')
                }
            }

            //实际上最新版sdk和gradle可以直接指定apk了, 不需要.ap_文件
            def processResourcesTask = baseVariant.getProcessResources();
            //def processResFullName = baseVariant.apkData.fullName
            processResourcesTask.doLast {
                copy {
                    println '编译宿主资源编译完成后导出后缀为.ap_的资源包，此资源包在编译非独立插件时需要此包'

                    //println com.android.builder.Version.ANDROID_GRADLE_PLUGIN_VERSION
                    //Android Gradle Plugin Version 3.x
                    if (!AndroidGradlePluginVersion.startsWith("Android Gradle 2")) {
                        println processResourcesTask.resPackageOutputFolder
                        from processResourcesTask.resPackageOutputFolder
                        into("${project.buildDir}/outputs/")
                        rename(new Transformer<String, String>() {
                            @Override
                            String transform(String s) {
                                return "resources.ap_"
                            }
                        })
                    } else {
                        //Android Gradle Plugin Version 2.x
                        println processResourcesTask.packageOutputFile
                        from processResourcesTask.packageOutputFile
                        into("${project.buildDir}/outputs/")
                        rename(new Transformer<String, String>() {
                            @Override
                            String transform(String s) {
                                return "resources.ap_"
                            }
                        })
                    }
                }
            }
        }

        //第5件事
        def org.gradle.api.tasks.compile.JavaCompile javaCompile = variant.javaCompile;
        javaCompile.doLast {

            println "Merge Jar After Task " + javaCompile.name + " buildType is " + buildTypeName + ", flavorName is " + flavorName +  ", varName is " + varName

            File jarFile = new File(project.buildDir, "outputs/host_classes.jar")
            if (jarFile.exists()) {
                jarFile.delete()
            }

            JarMerger jarMerger = new JarMerger(jarFile)
            try {
                jarMerger.setFilter(new JarFilter() {
                    public boolean checkEntry(String archivePath) throws JarFilter.ZipAbortException {
                        if (archivePath.endsWith(".class")) {
                            return true
                        }
                        return false
                    }
                });

                javaCompile.classpath.each { jarPath ->
                    jarMerger.addJar(jarPath);
                    //jarMerger.addFolder(directoryInput.getFile());
                }

                String buildClassesTaskName1 = "jar" + varName.capitalize() +  "Classes";
                String classesPath1 = 'intermediates/packaged/' + (flavorName.equals("")?"":(flavorName + "/")) + buildTypeName + "/classes.jar";

                String buildClassesTaskName2 = "bundleAppClasses" + varName.capitalize();
                String classesPath2 = 'intermediates/classes-jar/' + (flavorName.equals("")?"":(flavorName + "/")) + buildTypeName + "/classes.jar"

                def buildClassesTaskName;
                def classesPath;

                if (tasks.findByName(buildClassesTaskName1)) {
                    buildClassesTaskName = buildClassesTaskName1;
                    classesPath = classesPath1;
                } else if (tasks.findByName(buildClassesTaskName2)) {
                    buildClassesTaskName = buildClassesTaskName2;
                    classesPath = classesPath2;
                } else {
                    throw new IllegalAccessError("未找到打包宿主classes的task，请检查android gradle 插件版本")
                }

                File classes = new File(buildDir, classesPath);

                println "classes path is " + classes.absolutePath
                println "buildClassesTaskName is " + buildClassesTaskName

                if (!classes.exists()) {
                    try {
                        tasks.getByName(buildClassesTaskName).execute()
                    } catch(Exception e) {
                        println "fail to create jar for task " + javaCompile.name + " " + buildClassesTaskName
                    }
                } else {
                    println "classes path already exists： " + classes.absolutePath
                }
                if (classes.exists()) {
                    jarMerger.addJar(classes)
                }
            } finally {
                jarMerger.close()
            }

            println "Merge Jar Finished, Jar is at " + jarFile.absolutePath
        }

        //第6件事
        //处理混淆，这里保存混淆以后dex之前的jar包作为基线包备用
        def proguardTask = project.tasks.findByName("transformClassesAndResourcesWithProguardFor${variant.name.capitalize()}")
        if (proguardTask) {
            proguardTask.doFirst {
                println "开始混淆任务：" + varName.capitalize()
            }
            proguardTask.doLast {
                println "混淆完成：" + varName.capitalize()
                boolean isFind = false;
                proguardTask.outputs.files.files.each { File file->
                    //http://blog.csdn.net/sbsujjbcy/article/details/50839263
                    //build/intermediates/transforms/proguard/anzhi/release/jars/3/1f/main.jar
                    //最新版本路径已发生变化；2017-11-12
                    project.logger.error "file outputs=>${file.absolutePath}"
                    String keyword = File.separator + "transforms" + File.separator + "proguard" + File.separator;
                    println String.valueOf(file.absolutePath.contains(keyword)) + ", " + String.valueOf(file.absolutePath.endsWith(buildTypeName))
                    if (file.absolutePath.contains(keyword) && file.absolutePath.endsWith(buildTypeName)) {

                        isFind = true;
                        def sourceHostObfuscatedJar
                        if (new File(file.absolutePath + "/0.jar").exists()) {
                            sourceHostObfuscatedJar = file.absolutePath + "/0.jar"
                        } else if (new File(file.absolutePath + "/jars/3/1f/main.jar").exists()) {
                            sourceHostObfuscatedJar = file.absolutePath + "/jars/3/1f/main.jar"
                        }
                        def hostObfuscatedJar = "host_obfuscated.jar"
                        println "导出混淆后的宿主jar " + sourceHostObfuscatedJar + " 包到 " + "${project.buildDir}/outputs/" + hostObfuscatedJar

                        copy {
                            from sourceHostObfuscatedJar
                            into("${project.buildDir}/outputs/")
                            rename(new Transformer<String, String>() {
                                @Override
                                String transform(String s) {
                                    return hostObfuscatedJar
                                }
                            })
                        }
                    }
                }
                if (!isFind) {
                    throw "obfuscated jar file not found, please check."
                }
            }
        }

        //第4件事
        tasks.findByName("generate${varName.capitalize()}Sources").doFirst {

            println '编译宿主ap完成后根据资源中间文件以及导出的资源id表生成一份主题patch包，编译非独立插件时需要此包 flavorName = ' + flavorName + ", buildTypeName = " + buildTypeName

            createThemePatch(flavorName, buildTypeName);

        }

        //导出宿主最终的基线包
        tasks.findByName("assemble${varName.capitalize()}").finalizedBy makeHostBaseLine
    }

    if (gradle.startParameter.taskNames.find {
        println ">>>>>>执行命令: " + it
        it.startsWith("assemble") || it.startsWith("build")
    } != null) {
        //nothing
    }
}

//将宿主编译产物作为基线包存档，这样可以使插件脱离宿主工程独立编译
task makeHostBaseLine(type: Zip) {
    extension "bar" //Baseline Application Resource
    baseName 'host'
    from zipTree("build/outputs/resources.ap_")
    from('build/outputs') {
        exclude '*.ap_'
    }
}

//导出主题patch
def createThemePatch(String flavor, String buildType) {

    File patchDir = new File(project.buildDir.absolutePath + "/outputs/theme_patch/" + buildType);
    patchDir.mkdirs();

    File generatedRes = new File(project.buildDir.absolutePath + "/outputs/generated_exported_all_resouces.xml");
    File dest = new File(patchDir, "patch_theme.xml")

    println "export from " + generatedRes + " to " + dest

    if (!generatedRes.exists()) {
        throw new FileNotFoundException("File Not Found : " + generatedRes.absolutePath)
    }

    def packageName = android.defaultConfig.applicationId
    if (android.buildTypes[buildType].applicationIdSuffix != null) {
        packageName = packageName + android.buildTypes[buildType].applicationIdSuffix;
    }

    ThemeProcessor.exportThemeStyle(generatedRes, dest, packageName)

    String mergedResDir = "${project.buildDir}/intermediates/res/merged/" + (flavor.equals("")?"":(flavor + "/")) + buildType + "/";
    FileTree allxmlFiles = fileTree(dir: mergedResDir)
    allxmlFiles.include 'values/values*.xml', 'values-v1*/values-v1*.xml', 'values-v2*/values-v2*.xml', 'values-*-v1*/values-*-v1*.xml', 'values-*-v4/values-*-v4.xml', 'values-land/values-land.xml', 'values-*-v2*/values-*-v2*.xml', 'values-*-v8/values-*-v8.xml'

    allxmlFiles.each { File itemFile ->
        dest = new File(patchDir, 'patch_' + itemFile.name)

        println "export from " + itemFile + " to " + dest

        ThemeProcessor.exportThemeStyle(itemFile, dest, packageName)
    }
}

public class ThemeProcessor extends DefaultHandler {

    public static void exportThemeStyle(File srcFile, File destFile, String packageName) {
        try {
            SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser();
            saxParser.parse(new FileInputStream(srcFile), new ThemeProcessor(destFile, packageName));
        } catch (ParserConfigurationException e) {
            System.out.println(e.getMessage());
        } catch (SAXException e) {
            System.out.println(e.getMessage());
        } catch (FileNotFoundException e) {
            System.out.println(e.getMessage());
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }

    }

    ////////////////
    ////////////////
    ////////////////

    File destFile;
    String packageName;
    Stack<Node> stack = new Stack<Node>();
    BufferedWriter outXmlStream = null;

    HashSet<String> attrSets = new HashSet<>();

    HashSet<String> dupcate = new HashSet<>();

    public ThemeProcessor(File destFile, String packageName) {
        this.destFile = destFile;
        this.packageName = packageName;
    }

    public void startDocument() throws SAXException {
        try {
            outXmlStream = new BufferedWriter(new FileWriter(destFile));
            outXmlStream.write("<?xml version=\"1.0\" encoding=\"utf-8\"?>");
            outXmlStream.write("\n<!-- AUTO-GENERATED FILE.  DO NOT MODIFY -->");
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {

        if (qName.equals("bool") || qName.equals("color") || qName.equals("dimen") || qName.equals("eat-comment")
                || qName.equals("integer") || qName.equals("string")
                || qName.equals("ns2:g") || qName.equals("ns1:g")
                || qName.equals("u")) {
            stack.add(new Node(attributes.getValue("name"), false, true));
            return;
        }

        boolean skip = false;
        if (!qName.equals("declare-styleable")) {
            String space = "\n";
            for (int i = 0; i < stack.size(); i++) {
                space = space + "    ";
            }
            String tag = space + "<" + qName;
            for (int i = 0; i < attributes.getLength(); i++) {
                tag = tag + " " + attributes.getQName(i) + "=\""+ attributes.getValue(i) + "\"";
            }
            tag = tag + ">";
            try {
                if (qName.equals("attr") && (attributes.getValue("name").startsWith("android:") || (attrSets.add(attributes.getValue("name"))?false:(dupcate.add(attributes.getValue("name"))?true:true)))
                        || (qName.equals("public") && (!attributes.getValue("type").equals("attr") || attributes.getValue("name").startsWith("public_static_final_")))) {
                    //skip
                    skip = true;
                } else {
                    if (qName.equals("enum")) {
                        if (!stack.empty()) {
                            Node top = stack.peek();
                            if (!dupcate.contains(top.name)) {
                                outXmlStream.write(tag);
                            }
                        } else {
                            outXmlStream.write(tag);
                        }
                    } else {
                        outXmlStream.write(tag);
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        if (!stack.empty()) {
            Node top = stack.peek();
            top.hasChild = true;
        }
        stack.add(new Node(attributes.getValue("name"), false, skip));
    }

    public void endElement(String uri, String localName, String qName) throws SAXException {

        Node node = stack.pop();
        if (node.skip) {
            return;
        }

        if (!qName.equals("declare-styleable")) {
            String space = "";
            if (node.hasChild) {
                space = "\n";
                for (int i = 0; i < stack.size(); i++) {
                    space = space + "    ";
                }
            }
            try {
                if (!stack.empty()) {
                    Node parent = stack.peek();
                    if (qName.equals("enum") && dupcate.contains(parent.name)) {
                        //nothing
                    } else {
                        outXmlStream.write(space + "</" + qName + ">");
                    }
                } else {
                    outXmlStream.write(space + "</" + qName + ">");
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

    }

    public void characters(char[] ch, int start, int length) throws SAXException {
        Node node = stack.peek();
        if (node.skip) {
            return;
        }

        String text = new String(ch, start, length);
        text = text.replaceAll("[\n ]", "");
        if (text.length() > 0) {
            try {
                if (text.startsWith("@color")) {
                    text = text.replace("@color", "@*" + packageName +":color");

                } else if (text.startsWith("@dimen")) {
                    text = text.replace("@dimen", "@*" + packageName +":dimen");

                } else if (text.startsWith("@string")) {
                    text = text.replace("@string", "@*" + packageName +":string");

                } else if (text.startsWith("@bool")) {
                    text = text.replace("@bool", "@*" + packageName +":bool");

                } else if (text.startsWith("@integer")) {
                    text = text.replace("@integer", "@*" + packageName +":integer");

                } else if (text.startsWith("@layout")) {
                    text = text.replace("@layout", "@*" + packageName +":layout");

                } else if (text.startsWith("@anim")) {
                    text = text.replace("@anim", "@*" + packageName +":anim");

                } else if (text.startsWith("@id")) {
                    text = text.replace("@id", "@*" + packageName +":id");

                } else if (text.startsWith("@drawable")) {
                    text = text.replace("@drawable", "@*" + packageName +":drawable");

                    //} else if (text.startsWith("?attr")) {
                    //    text = text.replace("?attr", "?*" + packageName +":attr");
                } else if (text.startsWith("@mipmap")) {
                    text = text.replace("@mipmap", "@*" + packageName +":mipmap");
                }

                outXmlStream.write(text);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public void endDocument() throws SAXException {
        try {
            outXmlStream.flush();
            outXmlStream.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static class Node {
        String name = null;
        boolean hasChild = false;
        boolean skip = false;

        public Node(String name, boolean hasChild, boolean skip) {
            this.name = name;
            this.hasChild = hasChild;
            this.skip = skip;
        }
    }

}

public class JarMerger {
    private final byte[] buffer = new byte[8192];
    private final File jarFile;
    private FileOutputStream fos;
    private JarOutputStream jarOutputStream;

    private JarFilter filter;

    public JarMerger(File jarFile) throws IOException {
        this.jarFile = jarFile;
    }

    private void init() throws IOException {
        if(this.fos == null && this.jarOutputStream == null) {
            if(!this.jarFile.getParentFile().mkdirs() && !this.jarFile.getParentFile().exists()) {
                throw new RuntimeException("Cannot create directory " + this.jarFile.getParentFile());
            }
            this.fos = new FileOutputStream(this.jarFile);
            this.jarOutputStream = new JarOutputStream(fos);
        }
    }

    public void setFilter(JarFilter filter) {
        this.filter = filter;
    }

    public void addFolder(File folder) throws IOException {
        this.init();

        try {
            this.addFolderInternal(folder, "");
        } catch (JarFilter.ZipAbortException var3) {
            throw new IOException(var3);
        }
    }

    private void addFolderInternal(File folder, String path) throws IOException, JarFilter.ZipAbortException {
        File[] files = folder.listFiles();
        if(files != null) {
            File[] arr$ = files;
            int len$ = files.length;

            for(int i$ = 0; i$ < len$; ++i$) {
                File file = arr$[i$];
                if(!file.isFile()) {
                    if(file.isDirectory()) {
                        this.addFolderInternal(file, path + file.getName() + "/");
                    }
                } else {
                    String entryPath = path + file.getName();
                    if(this.filter == null || this.filter.checkEntry(entryPath)) {
                        this.jarOutputStream.putNextEntry(new JarEntry(entryPath));
                        FileInputStream fis = null;
                        try {
                            fis = new FileInputStream(file);

                            int count;
                            while((count = fis.read(this.buffer)) != -1) {
                                this.jarOutputStream.write(this.buffer, 0, count);
                            }
                        } finally {
                            if (fis != null) {
                                fis.close();
                                fis = null;
                            }
                        }

                        this.jarOutputStream.closeEntry();
                    }
                }
            }
        }

    }

    public void addJar(File file) throws IOException {
        this.addJar(file, false);
    }

    public void addJar(File file, boolean removeEntryTimestamp) throws IOException {
        this.init();

        FileInputStream e = null;
        ZipInputStream zis = null;
        try {
            e = new FileInputStream(file);
            zis = new ZipInputStream(e);

            ZipEntry entry;
            while((entry = zis.getNextEntry()) != null) {
                if(!entry.isDirectory()) {
                    String name = entry.getName();
                    if(this.filter == null || this.filter.checkEntry(name)) {
                        JarEntry newEntry;
                        if(entry.getMethod() == ZipEntry.STORED) {
                            newEntry = new JarEntry(entry);
                        } else {
                            newEntry = new JarEntry(name);
                        }

                        if(removeEntryTimestamp) {
                            newEntry.setTime(0L);
                        }

                        this.jarOutputStream.putNextEntry(newEntry);

                        int count;
                        while((count = zis.read(this.buffer)) != -1) {
                            this.jarOutputStream.write(this.buffer, 0, count);
                        }

                        this.jarOutputStream.closeEntry();
                        zis.closeEntry();
                    }
                }
            }
        } catch (JarFilter.ZipAbortException var13) {
            throw new IOException(var13);
        } finally {
            if (zis != null) {
                zis.close();
            }
            if (e != null) {
                e.close();
            }
        }

    }

    public void addEntry(String path, byte[] bytes) throws IOException {
        this.init();
        this.jarOutputStream.putNextEntry(new JarEntry(path));
        this.jarOutputStream.write(bytes);
        this.jarOutputStream.closeEntry();
    }

    public void close() throws IOException {
        if (this.jarOutputStream != null) {
            jarOutputStream.close();
            jarOutputStream = null;
        }
        if (this.fos != null) {
            fos.close();
            fos = null;
        }

    }
}

public interface JarFilter {
    boolean checkEntry(String var1) throws ZipAbortException;

    public static class ZipAbortException extends Exception {
        private static final long serialVersionUID = 1L;

        public ZipAbortException() {
        }

        public ZipAbortException(String format, Object... args) {
            super(String.format(format, args));
        }

        public ZipAbortException(Throwable cause, String format, Object... args) {
            super(String.format(format, args), cause);
        }

        public ZipAbortException(Throwable cause) {
            super(cause);
        }
    }
}